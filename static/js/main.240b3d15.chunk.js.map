{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBOundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","cardComponent","robots","map","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.240b3d15.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`http://robohash.org/${id}?200*200`} />\n            <div>\n                <h2>\n                    {name}\n                </h2>\n                <p>{email}</p>\n            </div>\n        </div>);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardComponent = robots.map(({id, name, email}, i) => {\n        return (\n            <Card\n                id={id}\n                name={name}\n                email={email}\n            />\n        );\n    })\n    return (\n        <div>\n            {cardComponent}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                type='search'\n                className='pa3 ba b--green bg-lightest-blue'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border:'5px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error,info) {\n        this.setState({hasError: true})\n    }\n    \n    \n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>;\n        } \n        return this.props.children;\n    }\n}\n\n\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBOundry';\nimport {setSearchField, requestRobots} from '../actions';\n\n\nconst mapStatetoProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    \n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const {searchField, onSearchChange, robots, isPending} = this.props;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        return isPending ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1>RoboFriends</h1>\n\n                    <SearchBox searchChange={onSearchChange} />\n\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filterRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n\n                </div>\n            );\n    }\n\n}\n\n\n\nexport default connect(mapStatetoProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()\n        ).then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => ({type: REQUEST_ROBOTS_FAILED, payload: error}));\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst intialStateSearch = {\n    searchField:''\n}\n\nconst intialStateRobots = {\n    isPending:false,\n    robots:[],\n    error:''\n}\n\nexport const requestRobots = (state=intialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending:true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending:false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending:false});\n        default:\n            return state;\n    }\n}\n\n\nexport const searchRobots = (state=intialStateSearch,action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider, connect} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducer';\nimport 'tachyons';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}